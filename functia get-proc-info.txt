char proc_dir[6] = "/proc";
                        char pid_value[10]; 
                        strcpy(pid_value, cs+16); //valoarea pidului
                        char path[20];

                        /*  
                            https://stackoverflow.com/questions/12510874/how-can-i-check-if-a-directory-exists
                            idee adaptata
                        */

                        DIR* dir = opendir(proc_dir);

                        if (dir) /* Directorul exista */
                        {
                            printf("[S] Directorul cu numele \"%s\" exista! \n", proc_dir);
                            printf("[S] S-a scris pid-ul \"%s\"!\n", pid_value);

                            //construire calea directorului /proc/<pid>
                            path[0] = '\0';
                            strcat(path,proc_dir);
                            strcat(path,"/");
                            strcat(path,pid_value);

                            printf("[S] Path-ul pidului in director este: \"%s\"  \n", path);        

                            //verific daca directorul /proc/<pid> exista
                            DIR* pid_dir = opendir(path);
                            if(pid_dir)
                            {
                                printf("[S] Directorul /proc/<pid> cu numele \"%s\" exista! \n", path);

                                char status_file[30]; //calea /proc/<pid>/status

                                status_file[0] = '\0';

                                strcat(status_file,path);
                                strcat(status_file,"/status");

                                printf("[S] Path-ul catre status este: \"%s\"  \n", status_file);

                                // cautare name, state, ppid, uid si vmsize in fisierul /proc/<pid>/status  :
                                FILE *fptr = fopen(status_file, "r");

                                if (fptr == NULL)
                                {
                                    printf("Eroare la deschiderea fisierului: %s \n", status_file);
                                    return 1;
                                }
                                
                                char line[300];
                                char information[300];
                                information[0]='\0';

                                // Cautare informatiei linie cu linie
                                while (fgets(line, 300, fptr))
                                {
                                    if(strncmp(line, "Name:", 5) == 0)
                                    {
                                        strcat(information, line);
                                    }
                                    else
                                    if(strncmp(line, "State:", 6) == 0)
                                    {
                                        strcat(information, line);
                                    }
                                    else
                                    if(strncmp(line, "PPid:", 5) == 0)
                                    {
                                        strcat(information, line);
                                    }
                                    else
                                    if(strncmp(line, "Uid:", 4) == 0)
                                    {
                                        strcat(information, line);
                                    }
                                    else
                                    if(strncmp(line, "VmSize:", 7) == 0)
                                    {
                                        strcat(information, line);
                                    }
                                }
                                
                                fclose(fptr);  // inchidere fisier /proc/<pid>/status

                                closedir(pid_dir);  //inchidere director /proc/<pid>

                                int lung = strlen(information);

                                //conversie int lung in char lung[]
                                char buf[3];
                                buf[0] = '\0';
                                
                                sprintf(buf, "%d", lung);

                                // trimit cati bytes are mesajul scris de server pt ca, CLIENTUL sa ii citeasca
                                if ((num2 = write(fd2, buf, 3)) == -1) // se scrie in fifo si in num am cati bytes s-au scris
                                    perror("[S] Problema la scriere in FIFO! \n");
                                
                                sleep(1);   // astept CLIENTUL sa primeasca lungimea mesajului
                                
                                // trimit mesajul
                                if ((num2 = write(fd2, information, strlen(information))) == -1) // se scrie in fifo si in num am cati bytes s-au scris
                                    perror("[S] Problema la scriere in FIFO! \n");
                            }
                            else
                            if (ENOENT == errno) /* Directorul pid_dir nu exista */
                            { 
                                printf("[S] Directorul (cu pid) numele \"%s\" nu exista! \n", path);
                                
                                // trimit cati bytes are mesajul scris de server pt ca, CLIENTUL sa ii citeasca
                                if ((num2 = write(fd2, "26", 3)) == -1) // se scrie in fifo si in num am cati bytes s-au scris
                                    perror("[S] Problema la scriere in FIFO! \n");
                                
                                sleep(1);   // astept CLIENTUL sa primeasca lungimea mesajului
                                
                                // trimit mesajul
                                char msg[300] = "Pid-ul introdus nu exista!";
                                if ((num2 = write(fd2, msg, strlen(msg))) == -1) // se scrie in fifo si in num am cati bytes s-au scris
                                    perror("[S] Problema la scriere in FIFO! \n");
                            } 
                            else /* eroare la opendir()*/
                            {
                                printf("Eroare la deschiderea directorului (cu pid) \"%s\" \n", path);
                            }
                            closedir(dir);  //inchidere director /proc
                        }
                        else 
                        {   
                            if (ENOENT == errno) /* Directory does not exist. */
                            { 
                                printf("Directorul cu numele \"%s\" nu exista! \n", proc_dir);
                            } 
                            else /* opendir() failed for some other reason. */
                            {
                                printf("Eroare la deschiderea directorului \"%s\" \n", proc_dir);
                            }
                        }